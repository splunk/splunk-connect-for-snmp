{{- $workerArgs := .Values.files.scheduler.args | default dict -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sc4snmp-scheduler
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app: sc4snmp-scheduler
spec:
  replicas: {{ .Values.scheduler.replicas }}
  selector:
    matchLabels:
      app: sc4snmp-scheduler
  template:
    metadata:
      labels:
        app: sc4snmp-scheduler
    spec:
      securityContext:
          runAsNonRoot: true      
          runAsUser: 1001
          runAsGroup: 1001
          fsGroup: 2000    
      containers:
        - name: sc4snmp-scheduler
          image: {{ .Values.sc4snmp.image | default "ghcr.io/splunk/splunk-connect-for-snmp/container" }}:{{ .Values.sc4snmp.tag | default "1" }}
          imagePullPolicy: {{ .Values.sc4snmp.pullPolicy | default "IfNotPresent" }}
          args:
            [
              "celery", "beat",
            ]
          securityContext:
            allowPrivilegeEscalation: false          
          env:
            - name: CELERY_BROKER_URL
              value: amqp://{{ .Release.Namespace }}:sc4snmp@sc4snmp-rabbitmq:5672/
            - name: MONGO_URI
          {{- if eq .Values.mongodb.architecture "replicaset" }}
              value: mongodb+srv://sc4snmp-mongodb-headless.{{ .Release.Namespace }}.svc.{{ .Values.mongodb.clusterDomain }}/?tls=false&ssl=false&replicaSet=rs0
          {{ else }}
              value: mongodb://sc4snmp-mongodb:27017
          {{ end }}              
            - name: MIBS_SERVER_URL
              value: {{ printf "http://sc4snmp-mib-server-service:%s" ( "5000" | default .Values.mib.service_port ) | quote }}
            - name: MIBS_FILES_URL
              value: $(MIBS_SERVER_URL)/files/asn1/@mib@
            - name: OTEL_SERVER_LOGS_URL
              value: {{ printf "http://otel-service:%s" ( .Values.otel.service_logs_port | default "8881" ) | quote }}
            - name: OTEL_SERVER_METRICS_URL
              value: {{ printf "http://otel-service:%s" ( .Values.otel.service_metrics_port | default "8882" ) | quote }}
            - name: LOG_LEVEL
              value: {{ .Values.scheduler.logLevel | default "INFO" }}
            - name: INVENTORY_REFRESH_RATE
              value: {{ .Values.scheduler.inventory_refresh_rate | default "600" | quote }}
          volumeMounts:
            - name: config
              mountPath: "/work/config"
              readOnly: true
            - name: inventory
              mountPath: "/work/inventory"
              readOnly: false
            - name: pysnmp-cache-volume
              mountPath: "/.pysnmp/"
              readOnly: false
          resources:
            {{- if .Values.scheduler.resources }}
{{ .Values.scheduler.resources | toYaml | trim | indent 12 }}
            {{ else }}
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 1000m
              memory: 2Gi
            {{ end }}
      volumes:
        # You set volumes at the Pod level, then mount them into containers inside that Pod
        - name: config
          configMap:
            # Provide the name of the ConfigMap you want to mount.
            name: sc4snmp-config
            # An array of keys from the ConfigMap to create as files
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: inventory
          configMap:
            # Provide the name of the ConfigMap you want to mount.
            name: sc4snmp-inventory
            # An array of keys from the ConfigMap to create as files
            items:
              - key: "inventory.csv"
                path: "inventory.csv"
        - name: pysnmp-cache-volume
          emptyDir: {}                
