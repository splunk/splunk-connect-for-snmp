{{- $workerArgs := .Values.files.scheduler.args | default dict -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sc4snmp-scheduler
  namespace: {{ .Release.Namespace | quote }}
  labels:
    app: sc4snmp-scheduler
spec:
  replicas: {{ .Values.scheduler.replicas }}
  selector:
    matchLabels:
      app: sc4snmp-scheduler
  template:
    metadata:
      labels:
        app: sc4snmp-scheduler
    spec:
      containers:
        - name: sc4snmp-scheduler
          image: {{ .Values.worker.image | default "ghcr.io/splunk/splunk-connect-for-snmp-poller/container" }}:{{ .Values.worker.tag | default "1" }}
          imagePullPolicy: {{ .Values.worker.pullPolicy | default "IfNotPresent" }}
          args:
            [
              {{ printf "\"--log=%s\"" ( .Values.scheduler.logLevel | default "WARN" ) }},
              "--config=/work/config/config.yaml",
              "--inventory=/work/inventory/inventory.csv",
              "--event_index={{ .Values.scheduler.index.event }}",
              "--metric_index={{ .Values.scheduler.index.metrics }}",
              "--meta_index={{ .Values.scheduler.index.meta }}",
              "--refresh_interval={{ $workerArgs.refresh_interval | default 1 }}",
              "--realtime_task_frequency={{ $workerArgs.realtime_task_frequency | default 60 }}",
              "--matching_task_frequency={{ $workerArgs.matching_task_frequency | default 10 }}",
              "--onetime_task_frequency={{ $workerArgs.onetime_task_frequency | default 120 }}",
            ]
          env:
            - name: MONGO_URI
          {{- if eq .Values.mongodb.architecture "replicaset" }}
              value: mongodb+srv://sc4snmp-mongodb-headless.{{ .Release.Namespace }}.svc.cluster.local/?tls=false&ssl=false&replicaSet=rs0
          {{ else }}
              value: mongodb://sc4snmp-mongodb:27017
          {{ end }}              
            - name: MIBS_SERVER_URL
              value: {{ printf "http://sc4snmp-mib-server-service:%s" ( "5000" | default .Values.mib.service_port ) | quote }}
            - name: CELERY_BROKER_URL
              value: amqp://sc4snmp:sc4snmp@sc4snmp-rabbitmq:5672/
            - name: POLLER_EXECUTION_MODE
              value: scheduler
          volumeMounts:
            - name: config
              mountPath: "/work/config"
              readOnly: true
            - name: inventory
              mountPath: "/work/inventory"
              readOnly: false
          resources:
            {{- if .Values.scheduler.resources }}
{{ .Values.scheduler.resources | toYaml | trim | indent 12 }}
            {{ else }}
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 1000m
              memory: 2Gi
            {{ end }}
      volumes:
        # You set volumes at the Pod level, then mount them into containers inside that Pod
        - name: config
          configMap:
            # Provide the name of the ConfigMap you want to mount.
            name: sc4snmp-config
            # An array of keys from the ConfigMap to create as files
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: inventory
          configMap:
            # Provide the name of the ConfigMap you want to mount.
            name: sc4snmp-inventory
            # An array of keys from the ConfigMap to create as files
            items:
              - key: "inventory.csv"
                path: "inventory.csv"
