{{- if eq (include "splunk-connect-for-snmp.polling.enable" .) "true" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "splunk-connect-for-snmp.scheduler.fullname" . }}
  labels:
    {{- include "splunk-connect-for-snmp.scheduler.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "splunk-connect-for-snmp.scheduler.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.scheduler.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "splunk-connect-for-snmp.scheduler.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "splunk-connect-for-snmp.serviceAccountName" . }}
      securityContext:
        fsGroup: 10001
      containers:
        - name: {{ .Chart.Name }}-scheduler
          securityContext:
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 10001
            runAsGroup: 10001
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args:
            [
              "celery", "beat",
            ]          
          env:
            - name: CONFIG_PATH
              value: /app/config/config.yaml
            - name: REDIS_URL
              value: {{ include "splunk-connect-for-snmp.redis_url" . }}
            - name: CELERY_BROKER_URL
              value: {{ include "splunk-connect-for-snmp.celery_url" . }}
            - name: MONGO_URI
              value: {{ include "splunk-connect-for-snmp.mongo_uri" . }}
            - name: MIB_SOURCES
              value: "http://{{ printf "%s-%s" .Release.Name "mibserver" }}/asn1/@mib@"
            - name: MIB_INDEX
              value: "http://{{ printf "%s-%s" .Release.Name "mibserver" }}/index.csv"
            - name: MIB_STANDARD
              value: "http://{{ printf "%s-%s" .Release.Name "mibserver" }}/standard.txt"
            - name: LOG_LEVEL
              value: {{ .Values.scheduler.logLevel | default "INFO" }}
            - name: INVENTORY_REFRESH_RATE
              value: {{ .Values.scheduler.inventory_refresh_rate | default "600" | quote }}
          volumeMounts:
            - name: config
              mountPath: "/app/config"
              readOnly: true
            - name: pysnmp-cache-volume
              mountPath: "/.pysnmp/"
              readOnly: false            
            - name: tmp
              mountPath: "/tmp/"
              readOnly: false
          resources:
            {{- toYaml .Values.scheduler.resources | nindent 12 }}
      {{- with .Values.scheduler.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if eq .Values.scheduler.podAntiAffinity "hard" }}
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                    {{- include "splunk-connect-for-snmp.scheduler.selectorLabels" . | nindent 22 }}
      {{- else if eq .Values.scheduler.podAntiAffinity "soft" }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 1
              podAffinityTerm:
                topologyKey: kubernetes.io/hostname
                labelSelector:
                  matchLabels:
                    {{- include "splunk-connect-for-snmp.scheduler.selectorLabels" . | nindent 22 }}
      {{- end }}
      {{- with .Values.scheduler.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        # You set volumes at the Pod level, then mount them into containers inside that Pod
        - name: config
          configMap:
            # Provide the name of the ConfigMap you want to mount.
            name: {{ include "splunk-connect-for-snmp.name" . }}-config
            # An array of keys from the ConfigMap to create as files
            items:
              - key: "config.yaml"
                path: "config.yaml"
        - name: pysnmp-cache-volume
          emptyDir: {}    
        - name: tmp
          emptyDir: {}
{{- end -}}