#   ########################################################################
#   Copyright 2021 Splunk Inc.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#   ########################################################################

name: ci-main
on:
  push:
    branches:
      - "main"
      - "develop"
      - "next"
    tags-ignore:
      - "v*"
  pull_request:
    branches:
      - "main"
      - "develop"
      - "next"
  workflow_call:
    secrets:
      FOSSA_API_KEY:
        description: API token for FOSSA app
        required: true
jobs:
  fossa-scan:
    name: fossa
    continue-on-error: true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: run fossa anlyze and create report
        run: |
          curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh | bash
          fossa analyze --debug
          fossa report attribution --format text > /tmp/THIRDPARTY
        env:
          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}
      - name: upload THIRDPARTY file
        uses: actions/upload-artifact@v2
        with:
          name: THIRDPARTY
          path: /tmp/THIRDPARTY
      - name: run fossa test
        run: |
          fossa test --debug
        env:
          FOSSA_API_KEY: ${{ secrets.FOSSA_API_KEY }}
  semgrep-scan:
    name: semgrep
    runs-on: ubuntu-latest
    if: (github.actor != 'dependabot[bot]')
    steps:
      - uses: actions/checkout@v2
      - uses: returntocorp/semgrep-action@v1
        with:
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: pre-commit/action@v2.0.3
  test-unit:
    name: Test Unit Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - 3.9
    steps:
      - uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          poetry install
      - name: Run Pytest with coverage
        run: |
          poetry run pytest --cov=./splunk_connect_for_snmp --cov-report=xml --junitxml=test-results/junit.xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          directory: ./coverage/reports/
          env_vars: OS,PYTHON
          fail_ci_if_error: true
          path_to_write_report: ./coverage/codecov_report.txt
          verbose: true
      - uses: actions/upload-artifact@v2 # upload test results
        if: success() || failure() # run this step even if previous step failed
        with:
          name: test-results-unit-python_${{ matrix.python-version }}
          path: test-results/*
  
  integration-tests-check:
    name: Check if run integration tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Project
        uses: actions/checkout@v2
        with:
          fetch-depth: 2
      - name: Get commit message
        id: get_commit_message
        run: |
          if [[ '${{ github.event_name }}' == 'push' ]]; then
            echo ::set-output name=commit_message::$(git log --format=%B -n 1 HEAD)
          elif [[ '${{ github.event_name }}' == 'pull_request' ]]; then
            echo ::set-output name=commit_message::$(git log --format=%B -n 1 HEAD^2)
          fi
    outputs:
      commit_message:
        echo "${{ steps.get_commit_message.outputs.commit_message }}"

  test-integration:
    name: Run integration tests
    needs:
      - integration-tests-check
    runs-on: ubuntu-latest
    if: "contains(needs.integration-tests-check.outputs.commit_message, '[run-int-tests]')"
    steps:
      - uses: actions/checkout@v2
      - name: Archieve repository
        working-directory: /home/runner/work/splunk-connect-for-snmp
        run: tar -czf splunk-connect-for-snmp.tgz splunk-connect-for-snmp
      - name: Copy archived repository to scripts directory
        run: cp /home/runner/work/splunk-connect-for-snmp/splunk-connect-for-snmp.tgz $GITHUB_WORKSPACE/integration_tests/scripts
      - uses: hashicorp/setup-terraform@v1
      - name: Install apt packages
        run: sudo apt-get install ansible
      - name: Install python packages
        run: pip install junitparser awscli
      - name: Set AWS varaibles in terraform file
        working-directory: ./integration_tests/scripts
        run: envsubst < main.tf.tmpl > main.tf
        env:
          AWS_SECURITY_GROUP: ${{ secrets.AWS_SECURITY_GROUP_INT_TESTS }}
          AWS_SUBNET: ${{ secrets.AWS_SUBNET_INT_TESTS }}
      - name: Create AWS test environment
        run: terraform init && terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_INT_TESTS }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_INT_TESTS }}
        working-directory: ./integration_tests/scripts
      - name: Run integration tests
        run: sleep 30 && timeout 60m ansible-playbook -v playbook.yml || true
        working-directory: ./integration_tests/scripts
      - name: Download and analyze logs
        run: |
          aws s3 cp s3://snmp-integration-tests/$GITHUB_RUN_ID/result.xml . && cat result.xml
          aws s3 cp s3://snmp-integration-tests/$GITHUB_RUN_ID/pytest.log . && cat pytest.log
          python result_analyzer.py
        working-directory: ./integration_tests/scripts
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_INT_TESTS }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_INT_TESTS }}
      - name: Destroy AWS test environment
        if: always()
        run: terraform destroy -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_INT_TESTS }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_INT_TESTS }}
        working-directory: ./integration_tests/scripts


