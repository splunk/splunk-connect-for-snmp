#   ########################################################################
#   Copyright 2021 Splunk Inc.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#   ########################################################################

name: ci-main
on:
  push:
    branches:
      - "main"
      - "develop"
      - "next"
      - "test/adding-integration-tests"
    tags-ignore:
      - "v*"
  pull_request:
    branches:
      - "main"
      - "develop"
      - "next"
jobs:
  semgrep:
    name: Scan
    runs-on: ubuntu-latest
    if: (github.actor != 'dependabot[bot]')
    steps:
      - uses: actions/checkout@v2
      - uses: returntocorp/semgrep-action@v1
        with:
          publishToken: ${{ secrets.SEMGREP_APP_TOKEN }}
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
      - uses: pre-commit/action@v2.0.3
  test-unit:
    name: Test Unit Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
          - 3.9
    steps:
      - uses: actions/checkout@v2
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        run: curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python3 -
      - name: Install Code
        run: |
          # shellcheck disable=SC1090
          source "$HOME/.poetry/env"
          poetry install
      - name: Run Pytest with coverage
        run: |
          # shellcheck disable=SC1090
          source "$HOME/.poetry/env"
          poetry run pytest --cov=./splunk_connect_for_snmp --cov-report=xml --junitxml=test-results/junit.xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml
          directory: ./coverage/reports/
          env_vars: OS,PYTHON
          fail_ci_if_error: true
          path_to_write_report: ./coverage/codecov_report.txt
          verbose: true
      - uses: actions/upload-artifact@v2 # upload test results
        if: success() || failure() # run this step even if previous step failed
        with:
          name: test-results-unit-python_${{ matrix.python-version }}
          path: test-results/*

  test-integration:
    name: Run integration tests
    runs-on: ubuntu-latest
    if: "contains(github.event.head_commit.message, '[run-int-tests]')"
    steps:
      - uses: actions/checkout@v2
      - name: Archieve repository
        working-directory: /home/runner/work/splunk-connect-for-snmp
        run: tar -czf splunk-connect-for-snmp.tgz splunk-connect-for-snmp
      - name: Copy archived repository to scripts directory
        run: cp /home/runner/work/splunk-connect-for-snmp/splunk-connect-for-snmp.tgz $GITHUB_WORKSPACE/integration_tests/scripts
      - uses: hashicorp/setup-terraform@v1
      - name: Install apt packages
        run: sudo apt-get install ansible
      - name: Install python packages
        run: pip install junitparser awscli
      - name: Set AWS varaibles in terraform file
        working-directory: ./integration_tests/scripts
        run: envsubst < main.tf.tmpl > main.tf
        env:
          AWS_SECURITY_GROUP: ${{ secrets.AWS_SECURITY_GROUP }}
          AWS_SUBNET: ${{ secrets.AWS_SUBNET }}
      - name: Create AWS test environment
        run: terraform init && terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        working-directory: ./integration_tests/scripts
      - name: Run integration tests
        run: sleep 30 && timeout 25m ansible-playbook -vvvv playbook.yml || true
        working-directory: ./integration_tests/scripts
      - name: Download and analyze logs
        run: |
          aws s3 cp s3://snmp-integration-tests/$GITHUB_RUN_ID/result.xml . && cat result.xml
          aws s3 cp s3://snmp-integration-tests/$GITHUB_RUN_ID/pytest.log . && cat pytest.log
          python result_analyzer.py
        working-directory: ./integration_tests/scripts
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Destroy AWS test environment
        if: always()
        run: terraform destroy -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        working-directory: ./integration_tests/scripts

  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: false
          persist-credentials: false

      #Build docker images
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Packages Docker Registry
        uses: docker/login-action@v1.9.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Docker meta
        id: docker_meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/splunk/splunk-connect-for-snmp/container
          tags: |
            type=semver,pattern=v{{major}}.{{minor}}
            type=semver,pattern=v{{major}}
            type=semver,pattern=v{{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=sha,format=long
      - name: Build and push action
        id: docker_action_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-to: type=inline
      - uses: actions/setup-node@v2
        with:
          node-version: "14"
      - name: Semantic Release
        id: version
        uses: cycjimmy/semantic-release-action@v2.6.0
        with:
          semantic_version: 17
          extra_plugins: |
            @semantic-release/exec
            @semantic-release/git
            @google/semantic-release-replace-plugin
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_ADMIN }}
  mike:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: oleksiyrudenko/gha-git-credentials@v2-latest
        with:
          token: "${{ secrets.PAT_CLATOOL }}"

      - name: Upload Docs
        run: |
          BRANCH=$(echo $GITHUB_REF | cut -d / -f 3)
          echo $BRANCH
          pip3 install poetry
          poetry install
          poetry run mike deploy -p $BRANCH
